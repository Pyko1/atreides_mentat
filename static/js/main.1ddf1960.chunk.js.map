{"version":3,"sources":["ts/houses.ts","ts/components/HouseTile.tsx","ts/state/actions.ts","ts/components/GameOverview.tsx","ts/components/NewGame.tsx","ts/ViewManager.tsx","serviceWorker.ts","ts/state/reducers.ts","ts/state/store.ts","index.tsx"],"names":["ALL_HOUSE_NAMES","houseNameStr","name","Error","assertNever","HouseTile","props","useDispatch","house_name","type","value","spice","readOnly","onClick","showNewGame","createAction","showOverview","showHouseDetails","showEditSpice","showAddCard","addCard","card","payload","removeCard","index","modifySpice","Number","isInteger","initHouses","GameOverview","state","useSelector","houses","dispatch","housesArray","houseState","undefined","push","React","setState","allow_start","i","map","key","checked","onChange","disabled","ViewManager","house","view","house_state","active_view","NewGame","Boolean","window","location","hostname","match","houseStateReducer","createReducer","builder","getHouse","addCase","action","cards","splice","defaultViewState","viewStateReducer","_","rootReducer","combineReducers","stateStore","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ddf1960.chunk.js","sourcesContent":["export const ALL_HOUSE_NAMES = [\"harkonen\", \"guild\", \"emperor\", \"bene\", \"fremen\"] as const;\nexport type HouseNameTuple = typeof ALL_HOUSE_NAMES;\nexport type HouseName = HouseNameTuple[number];\n\nfunction assertNever(): never {\n    throw new Error(\"Missing case in switch\");\n}\n\nexport function houseNameStr(name: HouseName) {\n    switch (name) {\n        case \"bene\": return \"Bene Geserit\";\n        case \"harkonen\": return \"Harkonen\";\n        case \"fremen\": return \"Fremen\"\n        case \"guild\": return \"Spacing Guild\";\n        case \"emperor\": return \"The Emperor\"\n        default: return assertNever();\n    }\n}","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { HouseName, houseNameStr } from \"ts/houses\";\n\nexport interface HouseTileProps {\n  spice: number;\n  house_name: HouseName;\n}\n\nconst HouseTile: React.FC<HouseTileProps> = props => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <h2>{houseNameStr(props.house_name)}</h2>\n      <label>\n        Spice\n        <input type=\"number\" value={props.spice} readOnly />\n      </label>\n      <input type=\"button\" value=\"Edit\" onClick={() => {}} />\n      <input type=\"button\" value=\"View Cards\" />\n    </div>\n  );\n};\n\nexport default HouseTile;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { HouseName } from \"ts/houses\";\nimport { TreacheryCard } from \"ts/TreacheryCard\";\nimport { InitHousePayload } from \"ts/state/types\";\n\nexport const showNewGame = createAction(\"view/new_game\");\nexport const showOverview = createAction(\"view/overview\");\nexport const showHouseDetails = createAction<HouseName>(\"view/house_details\");\nexport const showEditSpice = createAction<HouseName>(\"view/edit_spice\");\nexport const showAddCard = createAction<HouseName>(\"view/add_card\");\n\nexport const addCard = createAction(\n  \"houses/add_card\",\n  (house_name: HouseName, card: TreacheryCard) => {\n    return {\n      payload: {\n        house_name,\n        card,\n      },\n    };\n  }\n);\n\nexport const removeCard = createAction(\n  \"houses/remove_card\",\n  (house_name: HouseName, index: number) => {\n    return {\n      payload: {\n        house_name,\n        index,\n      },\n    };\n  }\n);\n\nexport const modifySpice = createAction(\n  \"houses/modify_spice\",\n  (house_name: HouseName, spice: number) => {\n    if (!Number.isInteger(spice)) {\n      throw new Error(\"Spice value must be an integer\");\n    }\n    return {\n      payload: {\n        house_name,\n        spice,\n      },\n    };\n  }\n);\n\nexport const initHouses = createAction<InitHousePayload>(\"houses/init\");\n","import * as React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport HouseTile from \"./HouseTile\";\nimport { RootState } from \"ts/state/reducers\";\nimport { ALL_HOUSE_NAMES } from \"ts/houses\";\nimport { showNewGame } from \"ts/state/actions\";\n\nconst GameOverview: React.FC = () => {\n  const state = useSelector((state: RootState) => ({\n    houses: state.houses,\n  }));\n  const dispatch = useDispatch();\n  const housesArray: JSX.Element[] = [];\n  for (let name of ALL_HOUSE_NAMES) {\n    const houseState = state.houses[name];\n    if (houseState !== undefined) {\n      housesArray.push(<HouseTile house_name={name} spice={houseState.spice} />);\n    }\n  }\n  return (\n    <div>\n      {housesArray}\n      <input\n        type=\"button\"\n        value=\"Reset game\"\n        onClick={() => {\n          dispatch(showNewGame());\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GameOverview;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ALL_HOUSE_NAMES, houseNameStr } from \"ts/houses\";\nimport { showOverview, initHouses } from \"ts/state/actions\";\nimport { InitHousePayload } from \"ts/state/types\";\n\nexport default () => {\n  const [state, setState] = React.useState<InitHousePayload>({\n    \"harkonen\": false,\n    \"emperor\": false,\n    \"guild\": false,\n    \"bene\": false,\n    \"fremen\": false\n  });\n\n  let allow_start = false;\n  for (let i of ALL_HOUSE_NAMES) {\n    if (state[i]) {\n      allow_start = true;\n      break;\n    }\n  }\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <h1>New game</h1>\n      <p>Select houses in the game</p>\n      {ALL_HOUSE_NAMES.map(name => {\n        return (\n          <div key={name}>\n            <label>\n              {houseNameStr(name)}\n              <input\n                type=\"checkbox\"\n                checked={!!state[name]}\n                onChange={() => {\n                  state[name] = !state[name];\n                  setState(state);\n                }}\n              />\n            </label>\n            <div></div>\n          </div>\n        );\n      })}\n      <input\n        type=\"button\"\n        value=\"Start game\"\n        disabled={!allow_start}\n        onClick={() => {\n          if (allow_start) {\n            dispatch(initHouses(state))\n            dispatch(showOverview());\n          }\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport GameOverview from \"./components/GameOverview\";\nimport HouseTile from \"./components/HouseTile\";\nimport NewGame from \"./components/NewGame\";\nimport { HouseName } from \"./houses\";\nimport { RootState } from \"ts/state/reducers\";\nimport { HouseState } from \"ts/state/types\";\n\nconst ViewManager: React.FC = () => {\n  const state = useSelector((state: RootState) => {\n    let house: { name: HouseName; spice: number } | undefined = undefined;\n    if (state.view.house_name !== undefined) {\n      const house_state = state.houses[state.view.house_name] as HouseState;\n      house = {\n        name: state.view.house_name,\n        spice: house_state.spice,\n      };\n    }\n    return {\n      house: house,\n      active_view: state.view.active_view,\n    };\n  });\n\n  switch (state.active_view) {\n    case \"new_game\":\n      return <NewGame />;\n    case \"overview\":\n      return <GameOverview />;\n    case \"house_details\":\n      if (state.house !== undefined) {\n        return <HouseTile spice={state.house.spice} house_name={state.house.name} />;\n      }\n      else {\n        throw new Error(\"Missing view.house_name\");\n      }\n    default: {\n      throw new Error(\"Unhandled active_view state\");\n    }\n  }\n};\n\nexport default ViewManager;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport {\n  addCard,\n  removeCard,\n  modifySpice,\n  showNewGame,\n  showOverview,\n  showHouseDetails,\n  showEditSpice,\n  showAddCard,\n  initHouses,\n} from \"ts/state/actions\";\nimport { ALL_HOUSE_NAMES, HouseName } from \"ts/houses\";\nimport { HousesState, ViewState } from \"ts/state/types\";\n\nexport const houseStateReducer = createReducer({} as HousesState, builder => {\n  function getHouse(name: HouseName, state: HousesState) {\n    const house = state[name];\n    if (house === undefined) {\n      throw new Error(\"House \" + name + \" not present in this game\");\n    }\n    return house;\n  }\n\n  builder.addCase(addCard, (state, action) => {\n    let house = getHouse(action.payload.house_name, state);\n    house.cards.push(action.payload.card);\n  });\n\n  builder.addCase(removeCard, (state, action) => {\n    let house = getHouse(action.payload.house_name, state);\n    house.cards.splice(action.payload.index, 1);\n  });\n\n  builder.addCase(modifySpice, (state, action) => {\n    let house = getHouse(action.payload.house_name, state);\n    house.spice += action.payload.spice;\n    if (house.spice < 0) {\n      house.spice = 0;\n    }\n  });\n\n  builder.addCase(initHouses, (state, action) => {\n    for (let house of ALL_HOUSE_NAMES) {\n      if (action.payload[house]) {\n        state[house] = {\n          spice: 0,\n          cards: [],\n          name: house,\n        };\n      } else {\n        state[house] = undefined;\n      }\n    }\n  });\n});\n\nconst defaultViewState: ViewState = {\n  active_view: \"new_game\",\n  house_name: undefined,\n};\n\nexport const viewStateReducer = createReducer(defaultViewState, builder => {\n  builder.addCase(showNewGame, (state, _) => {\n    state.active_view = \"new_game\";\n    state.house_name = undefined;\n  });\n\n  builder.addCase(showOverview, (state, _) => {\n    state.active_view = \"overview\";\n    state.house_name = undefined;\n  });\n\n  builder.addCase(showHouseDetails, (state, action) => {\n    state.active_view = \"house_details\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(showEditSpice, (state, action) => {\n    state.active_view = \"edit_spice\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(showAddCard, (state, action) => {\n    state.active_view = \"add_card\";\n    state.house_name = action.payload;\n  });\n});\n\nexport const rootReducer = combineReducers({\n  houses: houseStateReducer,\n  view: viewStateReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"@reduxjs/toolkit\";\nimport { rootReducer } from \"./reducers\";\n\nexport const stateStore = createStore(rootReducer);\n\nexport type StoreDispatch = typeof stateStore.dispatch;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ViewManager from \"ts/ViewManager\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { stateStore } from \"ts/state/store\";\n\nReactDOM.render(\n  <Provider store={stateStore}>\n    <ViewManager />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}