{"version":3,"sources":["ts/houses.ts","ts/state/actions.ts","ts/components/Modals/EditSpiceModal.tsx","ts/components/HouseTile.tsx","ts/components/TreacheryCard.tsx","ts/components/Modals/ViewCardsModal.tsx","ts/components/Modals/AddCardModal.tsx","ts/components/Modals/ConfirmResetModal.tsx","ts/components/GameOverview.tsx","ts/components/NewGame.tsx","ts/components/GameContainer.tsx","serviceWorker.ts","ts/state/reducers.ts","ts/state/store.ts","index.tsx"],"names":["ALL_HOUSE_NAMES","house_name_str","name","Error","assert_never","close_modal","createAction","show_edit_spice_modal","show_view_cards_modal","show_add_cards_modal","show_reset_game_modal","house_add_card","house","card","payload","house_remove_card","index","house_modify_spice","spice","Number","isInteger","start_game","reset_game","EditSpice","props","dispatch","useDispatch","React","spiceChange","setSpiceChange","close","className","onClick","type","value","onChange","ev","parseInt","currentTarget","step","min","HouseTile","cards","length","treachery_card_colours","defence","text","bg","special","useless","weapon","unknown","TreacheryCard","colour","kind","subtitle","children","ViewCards","allow_add_card","map","disabled","available_cards","AddCardModal","ConfirmResetModal","Modal","state","useSelector","root_state","houses","view","active_modal","house_name","EditSpiceModal","ViewCardsModal","GameOverview","housesArray","houseState","undefined","push","key","HouseSelect","checked","harkonen","emperor","guild","bene","fremen","setState","allow_start","i","new_checked","GameContainer","game","initialized","NewGame","Boolean","window","location","hostname","match","houses_initial_spice","atreides","house_state_reducer","createReducer","builder","getHouse","addCase","action","splice","initial_house_state","default_view_state","view_state_reducer","closeModal","_","game_state_reducer","root_reducer","combineReducers","enhancer","compose","persistState","initial_state","state_store","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a665ca26.chunk.js","sourcesContent":["export const ALL_HOUSE_NAMES = [\"harkonen\", \"guild\", \"emperor\", \"bene\", \"fremen\"] as const;\nexport type house_name_type = typeof ALL_HOUSE_NAMES;\nexport type house_name_t = house_name_type[number];\n\nfunction assert_never(): never {\n    throw new Error(\"Missing case in switch\");\n}\n\nexport function house_name_str(name: house_name_t) {\n    switch (name) {\n        case \"bene\": return \"Bene Geserit\";\n        case \"harkonen\": return \"Harkonen\";\n        case \"fremen\": return \"Fremen\"\n        case \"guild\": return \"Spacing Guild\";\n        case \"emperor\": return \"The Emperor\"\n        default: return assert_never();\n    }\n}","import { createAction } from \"@reduxjs/toolkit\";\nimport { house_name_t } from \"ts/houses\";\nimport { treachery_card_t } from \"ts/treachery_card\";\nimport { start_game_spec } from \"ts/state/types\";\n\nexport const close_modal = createAction(\"view/none\");\nexport const show_edit_spice_modal = createAction<house_name_t>(\"view/edit_spice\");\nexport const show_view_cards_modal = createAction<house_name_t>(\"view/view_cards\");\nexport const show_add_cards_modal = createAction<house_name_t>(\"view/add_card\");\nexport const show_reset_game_modal = createAction(\"view/reset\");\n\nexport const house_add_card = createAction(\n  \"houses/add_card\",\n  (house: house_name_t, card: treachery_card_t) => {\n    return {\n      payload: {\n        house,\n        card,\n      },\n    };\n  }\n);\n\nexport const house_remove_card = createAction(\n  \"houses/remove_card\",\n  (house: house_name_t, index: number) => {\n    return {\n      payload: {\n        house,\n        index,\n      },\n    };\n  }\n);\n\nexport const house_modify_spice = createAction(\n  \"houses/modify_spice\",\n  (house: house_name_t, spice: number) => {\n    if (!Number.isInteger(spice)) {\n      throw new Error(\"Spice value must be an integer\");\n    }\n    return {\n      payload: {\n        house,\n        spice,\n      },\n    };\n  }\n);\n\nexport const start_game = createAction<start_game_spec>(\"game/start\");\nexport const reset_game = createAction(\"game/reset\");\n","import * as React from \"react\";\n\nimport { useDispatch } from \"react-redux\";\nimport { house_name_t, house_name_str } from \"ts/houses\";\nimport { house_modify_spice, close_modal } from \"ts/state/actions\";\n\ninterface Props {\n  spice: number;\n  house: house_name_t;\n}\n\nconst EditSpice: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n  const [spiceChange, setSpiceChange] = React.useState(1);\n  const close = () => {\n    dispatch(close_modal());\n  };\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={close}></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">{house_name_str(props.house)}</p>\n          <button className=\"delete\" onClick={close}></button>\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"level\">\n            <div className=\"level-item has-text-centered\">\n              <div>\n                <p className=\"heading\">Spice</p>\n                <p className=\"title\">{props.spice}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"field\">\n            <input\n              className=\"input\"\n              type=\"number\"\n              value={spiceChange}\n              onChange={ev => {\n                setSpiceChange(parseInt(ev.currentTarget.value));\n              }}\n              step={1}\n              min={1}\n            />\n          </div>\n          <div className=\"columns\">\n            <div className=\"column is-half\">\n              <button\n                className=\"button is-success is-fullwidth\"\n                onClick={() => {\n                  dispatch(house_modify_spice(props.house, spiceChange));\n                  setSpiceChange(1);\n                }}\n              >\n                Increase\n              </button>\n            </div>\n            <div className=\"column is-half\">\n              <button\n                className=\"button is-danger is-fullwidth\"\n                onClick={() => {\n                  dispatch(house_modify_spice(props.house, -spiceChange));\n                  setSpiceChange(1);\n                }}\n              >\n                Decrease\n              </button>\n            </div>\n          </div>\n        </section>\n        <footer className=\"modal-card-foot\">\n          <button className=\"button is-secondary\" onClick={close}>\n            Back\n          </button>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default EditSpice;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { house_name_t, house_name_str } from \"ts/houses\";\nimport { show_edit_spice_modal, show_view_cards_modal } from \"ts/state/actions\";\nimport { treachery_card_t } from \"ts/treachery_card\";\n\nexport interface HouseTileProps {\n  spice: number;\n  house: house_name_t;\n  cards: ReadonlyArray<treachery_card_t>;\n}\n\nconst HouseTile: React.FC<HouseTileProps> = props => {\n  const dispatch = useDispatch();\n  return (\n    <div className=\"column is-half\">\n      <div className=\"box\">\n        <h2 className=\"title is-3 has-text-centered\">{house_name_str(props.house)}</h2>\n        <div className=\"columns\">\n          <div className=\"column is-half\">\n            <button\n              className=\"button is-warning is-fullwidth\"\n              onClick={() => dispatch(show_edit_spice_modal(props.house))}\n            >\n              {props.spice} spice\n            </button>\n          </div>\n          <div className=\"column is-half\">\n            <button\n              className=\"button is-info is-fullwidth\"\n              onClick={() => dispatch(show_view_cards_modal(props.house))}\n            >\n              {props.cards.length} card{props.cards.length === 1 ? \"\" : \"s\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HouseTile;\n","import * as React from \"react\";\nimport { treachery_card_t, treachery_card_kind } from \"ts/treachery_card\";\n\nconst treachery_card_colours: { [key in treachery_card_kind]: { text: string; bg: string } } = {\n  defence: { text: \"white\", bg: \"link\" },\n  special: { text: \"white\", bg: \"info\" },\n  useless: { text: \"black\", bg: \"warning\" },\n  weapon: { text: \"white\", bg: \"danger\" },\n  unknown: { text: \"white\", bg: \"black\" },\n};\n\nconst TreacheryCard: React.FC<{ card: treachery_card_t }> = props => {\n  const colour = treachery_card_colours[props.card.kind];\n  let subtitle = \"\";\n  if (props.card.kind !== \"unknown\" && props.card.kind !== \"useless\") {\n    subtitle = props.card.type;\n  } else {\n    subtitle = props.card.kind;\n  }\n  return (\n    <div className=\"card has-text-centered\">\n      <header className={\"card-header has-background-\" + colour.bg + \" has-text-\" + colour.text}>\n        <p className=\"is-uppercase\">{props.card.kind}</p>\n      </header>\n      <div className=\"card-content\">\n        <p className=\"subtitle is-5 is-capitalized\">{subtitle}</p>\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nexport default TreacheryCard;\n","import * as React from \"react\";\nimport { house_name_t, house_name_str } from \"ts/houses\";\nimport { treachery_card_t } from \"ts/treachery_card\";\nimport { useDispatch } from \"react-redux\";\nimport { show_add_cards_modal, close_modal, house_remove_card } from \"ts/state/actions\";\nimport TreacheryCard from \"ts/components/TreacheryCard\";\n\nconst ViewCards: React.FC<{\n  house: house_name_t;\n  cards: ReadonlyArray<treachery_card_t>;\n}> = props => {\n  const dispatch = useDispatch();\n  const close = () => dispatch(close_modal());\n  let allow_add_card = props.cards.length < 4;\n  if (props.house === \"harkonen\") {\n    allow_add_card = props.cards.length < 8;\n  }\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={close}></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Cards for {house_name_str(props.house)}</p>\n          <button className=\"delete\" onClick={close}></button>\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"columns is-multiline\">\n            {props.cards.map((card, index) => (\n              <div className=\"column is-half\">\n                <TreacheryCard card={card}>\n                  <button\n                    className=\"button is-danger\"\n                    onClick={() => {\n                      dispatch(house_remove_card(props.house, index));\n                    }}\n                  >\n                    Remove\n                  </button>\n                </TreacheryCard>\n              </div>\n            ))}\n          </div>\n        </section>\n        <footer className=\"modal-card-foot\">\n          <div className=\"buttons\">\n            <button\n              className=\"button is-primary\"\n              onClick={() => {\n                if (allow_add_card) {\n                  dispatch(show_add_cards_modal(props.house));\n                }\n              }}\n              disabled={!allow_add_card}\n            >\n              Add card\n            </button>\n            <button className=\"button is-secondary\" onClick={close}>\n              Back\n            </button>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewCards;\n","import * as React from \"react\";\nimport { house_name_t, house_name_str } from \"ts/houses\";\nimport { treachery_card_t } from \"ts/treachery_card\";\nimport TreacheryCard from \"ts/components/TreacheryCard\";\nimport { useDispatch } from \"react-redux\";\nimport { close_modal, house_add_card, show_view_cards_modal } from \"ts/state/actions\";\n\nconst available_cards: ReadonlyArray<treachery_card_t> = [\n  {\n    kind: \"weapon\",\n    type: \"poison\",\n  },\n  {\n    kind: \"weapon\",\n    type: \"projectile\",\n  },\n  {\n    kind: \"weapon\",\n    type: \"lasgun\",\n  },\n\n  {\n    kind: \"defence\",\n    type: \"shield\",\n  },\n  {\n    kind: \"defence\",\n    type: \"snooper\",\n  },\n\n  {\n    kind: \"special\",\n    type: \"cheap hero\",\n  },\n  {\n    kind: \"special\",\n    type: \"karama\",\n  },\n\n  {\n    kind: \"special\",\n    type: \"family atomics\",\n  },\n  {\n    kind: \"special\",\n    type: \"hajr\",\n  },\n  {\n    kind: \"special\",\n    type: \"truthtrance\",\n  },\n  {\n    kind: \"special\",\n    type: \"tleilaxu ghola\",\n  },\n  {\n    kind: \"special\",\n    type: \"weather control\",\n  },\n\n  {\n    kind: \"useless\",\n  },\n\n  {\n    kind: \"unknown\",\n  },\n];\n\nconst AddCardModal: React.FC<{ house: house_name_t }> = props => {\n  const dispatch = useDispatch();\n  const close = () => dispatch(close_modal());\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\"></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Add card to {house_name_str(props.house)}</p>\n          <button className=\"delete\" onClick={close}></button>\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"columns is-multiline\">\n            {available_cards.map(card => (\n              <div\n                className=\"column is-half\"\n                onClick={() => {\n                  dispatch(house_add_card(props.house, card));\n                  dispatch(show_view_cards_modal(props.house));\n                }}\n              >\n                <TreacheryCard card={card}>\n                  <button className=\"button is-success\">Add to hand</button>\n                </TreacheryCard>\n              </div>\n            ))}\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default AddCardModal;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { close_modal, reset_game } from \"ts/state/actions\";\n\nconst ConfirmResetModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const close = () => dispatch(close_modal());\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={close}></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Are you sure you wish to reset the game?</p>\n          <button className=\"delete\" onClick={close}></button>\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"buttons\">\n            <button className=\"button is-danger\" onClick={() => dispatch(reset_game())}>\n              Yes\n            </button>\n            <button className=\"button is-secondary\" onClick={close}>\n              No\n            </button>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmResetModal;\n","import * as React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { root_state } from \"ts/state/reducers\";\nimport { ALL_HOUSE_NAMES, house_name_t } from \"ts/houses\";\nimport { show_reset_game_modal } from \"ts/state/actions\";\nimport { house_state_t } from \"ts/state/types\";\nimport EditSpiceModal from \"ts/components/Modals/EditSpiceModal\";\nimport HouseTile from \"ts/components/HouseTile\";\nimport ViewCardsModal from \"ts/components/Modals/ViewCardsModal\";\nimport AddCardModal from \"ts/components/Modals/AddCardModal\";\nimport ConfirmResetModal from \"ts/components/Modals/ConfirmResetModal\";\n\nconst Modal: React.FC = props => {\n  const state = useSelector((root_state: root_state) => ({\n    houses: root_state.houses,\n    view: root_state.view,\n  }));\n\n  if (state.view.active_modal === \"none\") {\n    return null;\n  }\n\n  const house = state.houses[state.view.house_name as house_name_t] as house_state_t;\n  switch (state.view.active_modal) {\n    case \"edit_spice\": {\n      return <EditSpiceModal house={house.name} spice={house.spice} />;\n    }\n    case \"view_cards\": {\n      return <ViewCardsModal house={house.name} cards={house.cards} />;\n    }\n    case \"add_card\": {\n      return <AddCardModal house={house.name} />;\n    }\n    case \"reset_game\": {\n      return <ConfirmResetModal />;\n    }\n    default:\n      return null;\n  }\n};\n\nconst GameOverview: React.FC = () => {\n  const state = useSelector((state: root_state) => ({\n    houses: state.houses,\n  }));\n  const dispatch = useDispatch();\n  const housesArray: JSX.Element[] = [];\n  for (let name of ALL_HOUSE_NAMES) {\n    const houseState = state.houses[name];\n    if (houseState !== undefined) {\n      housesArray.push(\n        <HouseTile house={name} spice={houseState.spice} key={name} cards={houseState.cards} />\n      );\n    }\n  }\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"columns is-multiline\">{housesArray}</div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"buttons\">\n            <button\n              className=\"button is-secondary\"\n              onClick={() => {\n                dispatch(show_reset_game_modal());\n              }}\n            >\n              Reset game\n            </button>\n          </div>\n        </div>\n      </section>\n      <Modal></Modal>\n    </>\n  );\n};\n\nexport default GameOverview;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ALL_HOUSE_NAMES, house_name_str, house_name_t } from \"ts/houses\";\nimport { close_modal, start_game } from \"ts/state/actions\";\nimport { start_game_spec } from \"ts/state/types\";\n\nconst HouseSelect: React.FC<{\n  house: house_name_t;\n  checked: boolean;\n  onClick: () => void;\n}> = props => {\n  const [checked, setChecked] = React.useState<boolean>(false);\n  let className = \"button\";\n  if (props.checked) {\n    className += \" is-success\";\n  }\n  return (\n    <button className={className} onClick={props.onClick}>\n      <div>{house_name_str(props.house)}</div>\n    </button>\n  );\n};\n\nexport default () => {\n  const [state, setState] = React.useState<start_game_spec>({\n    harkonen: false,\n    emperor: false,\n    guild: false,\n    bene: false,\n    fremen: false,\n  });\n\n  let allow_start = false;\n  for (let i of ALL_HOUSE_NAMES) {\n    if (state[i]) {\n      allow_start = true;\n      break;\n    }\n  }\n  const dispatch = useDispatch();\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <p className=\"title is-1\">New game</p>\n          <p className=\"subtitle is-5\">Select which houses are present in the game</p>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"buttons is-centered\">\n            {ALL_HOUSE_NAMES.map(name => (\n              <HouseSelect\n                house={name}\n                checked={state[name]}\n                onClick={() => {\n                  const new_checked = !state[name];\n                  setState({ ...state, [name]: new_checked });\n                }}\n                key={name}\n              />\n            ))}\n          </div>\n          <div className=\"buttons is-centered\">\n            <button\n              className=\"button is-primary is-fullwidth\"\n              disabled={!allow_start}\n              onClick={() => {\n                if (allow_start) {\n                  dispatch(start_game(state));\n                  dispatch(close_modal());\n                }\n              }}\n            >\n              Start game\n            </button>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport GameOverview from \"ts/components/GameOverview\";\nimport NewGame from \"ts/components/NewGame\";\nimport { root_state } from \"ts/state/reducers\";\n\nconst GameContainer: React.FC = () => {\n  const state = useSelector((state: root_state) => {\n    return state.game;\n  });\n\n  if (!state.initialized) {\n    return <NewGame />;\n  } else {\n    return <GameOverview />;\n  }\n};\n\nexport default GameContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport {\n  house_add_card,\n  house_remove_card,\n  house_modify_spice,\n  close_modal as closeModal,\n  show_edit_spice_modal,\n  show_add_cards_modal,\n  start_game,\n  show_view_cards_modal,\n  reset_game,\n  show_reset_game_modal,\n} from \"ts/state/actions\";\nimport { ALL_HOUSE_NAMES, house_name_t } from \"ts/houses\";\nimport { houses_state_t, view_state_t, game_state_t, house_state_t } from \"ts/state/types\";\n\nconst houses_initial_spice = {\n  harkonen: 10,\n  atreides: 10,\n  fremen: 3,\n  bene: 5,\n  guild: 5,\n  emperor: 10,\n} as const;\n\nexport const house_state_reducer = createReducer({} as houses_state_t, builder => {\n  function getHouse(name: house_name_t, state: houses_state_t) {\n    const house = state[name];\n    if (house === undefined) {\n      throw new Error(\"House \" + name + \" not present in this game\");\n    }\n    return house;\n  }\n\n  builder.addCase(house_add_card, (state, action) => {\n    let house = getHouse(action.payload.house, state);\n    house.cards.push(action.payload.card);\n  });\n\n  builder.addCase(house_remove_card, (state, action) => {\n    let house = getHouse(action.payload.house, state);\n    house.cards.splice(action.payload.index, 1);\n  });\n\n  builder.addCase(house_modify_spice, (state, action) => {\n    let house = getHouse(action.payload.house, state);\n    house.spice += action.payload.spice;\n    if (house.spice < 0) {\n      house.spice = 0;\n    }\n  });\n\n  builder.addCase(start_game, (state, action) => {\n    for (let house of ALL_HOUSE_NAMES) {\n      if (action.payload[house]) {\n        const initial_house_state: house_state_t = {\n          spice: houses_initial_spice[house],\n          cards: [{ kind: \"unknown\" }],\n          name: house,\n        };\n        if (house === \"harkonen\") {\n          initial_house_state.cards.push({ kind: \"unknown\" });\n          initial_house_state.cards.push({ kind: \"unknown\" });\n        }\n        state[house] = initial_house_state;\n      } else {\n        state[house] = undefined;\n      }\n    }\n  });\n});\n\nconst default_view_state: view_state_t = {\n  active_modal: \"none\",\n  house_name: undefined,\n};\n\nexport const view_state_reducer = createReducer(default_view_state, builder => {\n  builder.addCase(closeModal, (state, _) => {\n    state.active_modal = \"none\";\n    state.house_name = undefined;\n  });\n\n  builder.addCase(show_edit_spice_modal, (state, action) => {\n    state.active_modal = \"edit_spice\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(show_add_cards_modal, (state, action) => {\n    state.active_modal = \"add_card\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(show_view_cards_modal, (state, action) => {\n    state.active_modal = \"view_cards\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(show_reset_game_modal, state => {\n    state.active_modal = \"reset_game\";\n    state.house_name = undefined;\n  });\n});\n\nconst default_game_state: game_state_t = {\n  initialized: false,\n};\n\nexport const game_state_reducer = createReducer(default_game_state, builder => {\n  builder.addCase(start_game, (state, action) => {\n    state.initialized = true;\n  });\n  builder.addCase(reset_game, (state, action) => {\n    state.initialized = false;\n  });\n});\n\nexport const root_reducer = combineReducers({\n  houses: house_state_reducer,\n  view: view_state_reducer,\n  game: game_state_reducer,\n});\n\nexport type root_state = ReturnType<typeof root_reducer>;\n","import { createStore, compose } from \"@reduxjs/toolkit\";\nimport { root_reducer, root_state } from \"./reducers\";\nimport persistState from \"redux-localstorage\";\n\nconst enhancer = compose(persistState([\"houses\", \"game\"] as any));\n\nconst initial_state: root_state = {\n  houses: {},\n  view: {\n    active_modal: \"none\",\n    house_name: undefined,\n  },\n  game: { initialized: false },\n};\n\nexport const state_store = createStore(root_reducer, initial_state, enhancer as any);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameContainer from \"ts/components/GameContainer\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { state_store } from \"ts/state/store\";\nimport \"bulma/css/bulma.css\";\n\nReactDOM.render(\n  <Provider store={state_store}>\n    <section className=\"hero is-primary\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <p className=\"title is-1\">Atreides mentat</p>\n          <p className=\"subtitle is-5\">for Dune (2018)</p>\n        </div>\n      </div>\n    </section>\n    <GameContainer />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}