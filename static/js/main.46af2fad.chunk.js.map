{"version":3,"sources":["ts/houses.ts","ts/state/actions.ts","ts/components/HouseTile.tsx","ts/components/GameOverview.tsx","ts/components/NewGame.tsx","ts/components/EditSpice.tsx","ts/components/Card.tsx","ts/components/ViewCards.tsx","ts/components/AddCard.tsx","ts/ViewManager.tsx","serviceWorker.ts","ts/state/reducers.ts","ts/state/store.ts","index.tsx"],"names":["ALL_HOUSE_NAMES","houseNameStr","name","Error","assertNever","showNewGame","createAction","showOverview","showHouseDetails","showEditSpice","showViewCards","showAddCard","addCard","house","card","payload","removeCard","index","modifySpice","spice","Number","isInteger","initHouses","HouseTile","props","dispatch","useDispatch","type","value","onClick","GameOverview","state","useSelector","houses","housesArray","houseState","undefined","push","key","React","setState","allow_start","i","map","checked","onChange","toggle","disabled","EditSpice","spiceChange","setSpiceChange","ev","parseInt","currentTarget","step","min","Card","detail","kind","ViewCards","cards","AddCard","new_card","set_new_card","cardTypeEl","target","ViewManager","view","house_name","house_state","active_view","NewGame","Boolean","window","location","hostname","match","houseStateReducer","createReducer","builder","getHouse","addCase","action","splice","defaultViewState","viewStateReducer","_","rootReducer","combineReducers","stateStore","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46af2fad.chunk.js","sourcesContent":["export const ALL_HOUSE_NAMES = [\"harkonen\", \"guild\", \"emperor\", \"bene\", \"fremen\"] as const;\nexport type HouseNameTuple = typeof ALL_HOUSE_NAMES;\nexport type HouseName = HouseNameTuple[number];\n\nfunction assertNever(): never {\n    throw new Error(\"Missing case in switch\");\n}\n\nexport function houseNameStr(name: HouseName) {\n    switch (name) {\n        case \"bene\": return \"Bene Geserit\";\n        case \"harkonen\": return \"Harkonen\";\n        case \"fremen\": return \"Fremen\"\n        case \"guild\": return \"Spacing Guild\";\n        case \"emperor\": return \"The Emperor\"\n        default: return assertNever();\n    }\n}","import { createAction } from \"@reduxjs/toolkit\";\nimport { HouseName } from \"ts/houses\";\nimport { TreacheryCard } from \"ts/TreacheryCard\";\nimport { InitHousePayload } from \"ts/state/types\";\n\nexport const showNewGame = createAction(\"view/new_game\");\nexport const showOverview = createAction(\"view/overview\");\nexport const showHouseDetails = createAction<HouseName>(\"view/house_details\");\nexport const showEditSpice = createAction<HouseName>(\"view/edit_spice\");\nexport const showViewCards = createAction<HouseName>(\"view/view_cards\");\nexport const showAddCard = createAction<HouseName>(\"view/add_card\");\n\nexport const addCard = createAction(\"houses/add_card\", (house: HouseName, card: TreacheryCard) => {\n  return {\n    payload: {\n      house,\n      card,\n    },\n  };\n});\n\nexport const removeCard = createAction(\"houses/remove_card\", (house: HouseName, index: number) => {\n  return {\n    payload: {\n      house,\n      index,\n    },\n  };\n});\n\nexport const modifySpice = createAction(\n  \"houses/modify_spice\",\n  (house: HouseName, spice: number) => {\n    if (!Number.isInteger(spice)) {\n      throw new Error(\"Spice value must be an integer\");\n    }\n    return {\n      payload: {\n        house,\n        spice,\n      },\n    };\n  }\n);\n\nexport const initHouses = createAction<InitHousePayload>(\"houses/init\");\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { HouseName, houseNameStr } from \"ts/houses\";\nimport { showEditSpice, showViewCards } from \"ts/state/actions\";\n\nexport interface HouseTileProps {\n  spice: number;\n  house: HouseName;\n}\n\nconst HouseTile: React.FC<HouseTileProps> = props => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <h2>{houseNameStr(props.house)}</h2>\n      <div>\n        <span>Spice</span>\n        <br />\n        <span>{props.spice}</span>\n      </div>\n      <input type=\"button\" value=\"Edit\" onClick={() => dispatch(showEditSpice(props.house))} />\n      <input\n        type=\"button\"\n        value=\"View Cards\"\n        onClick={() => dispatch(showViewCards(props.house))}\n      />\n    </div>\n  );\n};\n\nexport default HouseTile;\n","import * as React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport HouseTile from \"./HouseTile\";\nimport { RootState } from \"ts/state/reducers\";\nimport { ALL_HOUSE_NAMES } from \"ts/houses\";\nimport { showNewGame } from \"ts/state/actions\";\n\nconst GameOverview: React.FC = () => {\n  const state = useSelector((state: RootState) => ({\n    houses: state.houses,\n  }));\n  const dispatch = useDispatch();\n  const housesArray: JSX.Element[] = [];\n  for (let name of ALL_HOUSE_NAMES) {\n    const houseState = state.houses[name];\n    if (houseState !== undefined) {\n      housesArray.push(<HouseTile house={name} spice={houseState.spice} key={name}/>);\n    }\n  }\n  return (\n    <div>\n      {housesArray}\n      <input\n        type=\"button\"\n        value=\"Reset game\"\n        onClick={() => {\n          dispatch(showNewGame());\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GameOverview;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ALL_HOUSE_NAMES, houseNameStr } from \"ts/houses\";\nimport { showOverview, initHouses } from \"ts/state/actions\";\nimport { InitHousePayload } from \"ts/state/types\";\n\nexport default () => {\n  const [state, setState] = React.useState<InitHousePayload>({\n    \"harkonen\": false,\n    \"emperor\": false,\n    \"guild\": false,\n    \"bene\": false,\n    \"fremen\": false\n  });\n\n  let allow_start = false;\n  for (let i of ALL_HOUSE_NAMES) {\n    if (state[i]) {\n      allow_start = true;\n      break;\n    }\n  }\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <h1>New game</h1>\n      <p>Select houses in the game</p>\n      {ALL_HOUSE_NAMES.map(name => {\n        return (\n          <div key={name}>\n            <label>\n              {houseNameStr(name)}\n              <input\n                type=\"checkbox\"\n                checked={state[name]}\n                onChange={() => {\n                  let toggle = !state[name];\n                  setState({...state, [name]: toggle});\n                }}\n              />\n            </label>\n            <div></div>\n          </div>\n        );\n      })}\n      <input\n        type=\"button\"\n        value=\"Start game\"\n        disabled={!allow_start}\n        onClick={() => {\n          if (allow_start) {\n            dispatch(initHouses(state))\n            dispatch(showOverview());\n          }\n        }}\n      />\n    </div>\n  );\n};\n","import * as React from \"react\";\n\nimport { useDispatch } from \"react-redux\";\nimport { HouseName, houseNameStr } from \"ts/houses\";\nimport { modifySpice, showOverview } from \"ts/state/actions\";\n\ninterface Props {\n  spice: number;\n  house: HouseName;\n}\n\nconst EditSpice: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n  const [spiceChange, setSpiceChange] = React.useState(1);\n\n  return (\n    <div>\n      <h2>{houseNameStr(props.house)}</h2>\n      <div>\n        <span>Current Spice</span>\n        <span>{props.spice}</span>\n        <input\n          type=\"number\"\n          value={spiceChange}\n          onChange={ev => {\n            setSpiceChange(parseInt(ev.currentTarget.value));\n          }}\n          step={1}\n          min={1}\n        />\n        <input\n          type=\"button\"\n          value=\"add\"\n          onClick={() => {\n            dispatch(modifySpice(props.house, spiceChange));\n            setSpiceChange(1);\n          }}\n        />\n        <input\n          type=\"button\"\n          value=\"remove\"\n          onClick={() => {\n            dispatch(modifySpice(props.house, -spiceChange));\n            setSpiceChange(1);\n          }}\n        />\n      </div>\n      <input type=\"button\" value=\"close\" onClick={() => dispatch(showOverview())} />\n    </div>\n  );\n};\n\nexport default EditSpice;\n","import * as React from \"react\";\nimport { TreacheryCard } from \"ts/TreacheryCard\";\n\nconst Card: React.FC<TreacheryCard> = props => {\n  let detail: string = \"\";\n  switch (props.kind) {\n    case \"weapon\":\n    case \"defence\": {\n      detail = props.type;\n      break;\n    }\n  }\n\n  return (\n    <div>\n      <h3>{props.kind}</h3>\n      <h4>{detail}</h4>\n    </div>\n  );\n};\n\nexport default Card;\n","import * as React from \"react\";\nimport { HouseName } from \"ts/houses\";\nimport { TreacheryCard } from \"ts/TreacheryCard\";\nimport Card from \"ts/components/Card\";\nimport { useDispatch } from \"react-redux\";\nimport { showAddCard, showOverview } from \"ts/state/actions\";\n\nconst ViewCards: React.FC<{ house: HouseName; cards: ReadonlyArray<TreacheryCard> }> = props => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      {props.cards.map(card => (\n        <Card {...card} />\n      ))}\n      <input type=\"button\" value=\"Add card\" onClick={() => dispatch(showAddCard(props.house))} />\n      <input type=\"button\" value=\"Back\" onClick={() => dispatch(showOverview())} />\n    </div>\n  );\n};\n\nexport default ViewCards;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { TreacheryCardKind, TreacheryCard } from \"ts/TreacheryCard\";\nimport { showViewCards, addCard } from \"ts/state/actions\";\nimport { HouseName } from \"ts/houses\";\n\nconst AddCard: React.FC<{ house: HouseName }> = props => {\n  const dispatch = useDispatch();\n  const [new_card, set_new_card] = React.useState<TreacheryCard>({\n    kind: \"weapon\",\n    type: \"projectile\",\n  });\n\n  let cardTypeEl: JSX.Element | undefined = undefined;\n  switch (new_card.kind) {\n    case \"weapon\": {\n      cardTypeEl = (\n        <select\n          onChange={ev => {\n            set_new_card({ ...new_card, type: ev.target.value as any });\n          }}\n        >\n          <option value=\"projectile\">Projectile</option>\n          <option value=\"poison\">Poison</option>\n          <option value=\"lasgun\">Lasgun</option>\n        </select>\n      );\n      break;\n    }\n    case \"defence\": {\n      cardTypeEl = (\n        <select\n          onChange={ev => {\n            set_new_card({ ...new_card, type: ev.target.value as any });\n          }}\n        >\n          <option value=\"shield\">Shield</option>\n          <option value=\"snooper\">Snooper</option>\n        </select>\n      );\n      break;\n    }\n  }\n\n  return (\n    <div>\n      <select\n        onChange={ev => {\n          const new_kind = ev.target.value as TreacheryCardKind;\n          switch (new_kind) {\n            case \"weapon\": {\n              set_new_card({ kind: \"weapon\", type: \"projectile\" });\n              break;\n            }\n            case \"defence\": {\n              set_new_card({ kind: \"defence\", type: \"shield\" });\n              break;\n            }\n            case \"useless\": {\n              set_new_card({ kind: \"useless\" });\n              break;\n            }\n            default:\n              throw new Error(\"Unhandled card type\");\n          }\n        }}\n        value={new_card.kind}\n      >\n        <option value=\"weapon\">Weapon</option>\n        <option value=\"defence\">Defensive</option>\n        <option value=\"useless\">Useless</option>\n      </select>\n      {cardTypeEl}\n      <input\n        type=\"button\"\n        value=\"Add card\"\n        onClick={() => {\n          dispatch(addCard(props.house, new_card));\n          dispatch(showViewCards(props.house));\n        }}\n      ></input>\n      <input type=\"button\" value=\"Back\" onClick={() => dispatch(showViewCards(props.house))} />\n    </div>\n  );\n};\n\nexport default AddCard;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport GameOverview from \"./components/GameOverview\";\nimport HouseTile from \"./components/HouseTile\";\nimport NewGame from \"./components/NewGame\";\nimport { HouseName } from \"./houses\";\nimport { RootState } from \"ts/state/reducers\";\nimport { HouseState } from \"ts/state/types\";\nimport EditSpice from \"ts/components/EditSpice\";\nimport ViewCards from \"ts/components/ViewCards\";\nimport { TreacheryCard } from \"ts/TreacheryCard\";\nimport AddCard from \"ts/components/AddCard\";\n\nconst ViewManager: React.FC = () => {\n  const state = useSelector((state: RootState) => {\n    let house:\n      | { name: HouseName; spice: number; cards: ReadonlyArray<TreacheryCard> }\n      | undefined = undefined;\n    if (state.view.house_name !== undefined) {\n      const house_state = state.houses[state.view.house_name] as HouseState;\n      house = {\n        name: state.view.house_name,\n        spice: house_state.spice,\n        cards: house_state.cards,\n      };\n    }\n    return {\n      house: house,\n      active_view: state.view.active_view,\n    };\n  });\n\n  switch (state.active_view) {\n    case \"new_game\":\n      return <NewGame />;\n    case \"overview\":\n      return <GameOverview />;\n    case \"house_details\":\n      if (state.house !== undefined) {\n        return <HouseTile spice={state.house.spice} house={state.house.name} />;\n      } else {\n        throw new Error(\"Missing view.house\");\n      }\n    case \"edit_spice\":\n      if (state.house === undefined) {\n        throw new Error(\"Missing view.house\");\n      }\n      return <EditSpice spice={state.house.spice} house={state.house.name} />;\n    case \"view_cards\":\n      if (state.house === undefined) {\n        throw new Error(\"Missing view.house\");\n      }\n      return <ViewCards house={state.house.name} cards={state.house.cards} />;\n    case \"add_card\":\n      if (state.house === undefined) {\n        throw new Error(\"Missing view.house\");\n      }\n      return <AddCard house={state.house.name} />;\n    default: {\n      throw new Error(\"Unhandled active_view state\");\n    }\n  }\n};\n\nexport default ViewManager;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport {\n  addCard,\n  removeCard,\n  modifySpice,\n  showNewGame,\n  showOverview,\n  showHouseDetails,\n  showEditSpice,\n  showAddCard,\n  initHouses,\n  showViewCards,\n} from \"ts/state/actions\";\nimport { ALL_HOUSE_NAMES, HouseName } from \"ts/houses\";\nimport { HousesState, ViewState } from \"ts/state/types\";\n\nexport const houseStateReducer = createReducer({} as HousesState, builder => {\n  function getHouse(name: HouseName, state: HousesState) {\n    const house = state[name];\n    if (house === undefined) {\n      throw new Error(\"House \" + name + \" not present in this game\");\n    }\n    return house;\n  }\n\n  builder.addCase(addCard, (state, action) => {\n    let house = getHouse(action.payload.house, state);\n    house.cards.push(action.payload.card);\n  });\n\n  builder.addCase(removeCard, (state, action) => {\n    let house = getHouse(action.payload.house, state);\n    house.cards.splice(action.payload.index, 1);\n  });\n\n  builder.addCase(modifySpice, (state, action) => {\n    let house = getHouse(action.payload.house, state);\n    house.spice += action.payload.spice;\n    if (house.spice < 0) {\n      house.spice = 0;\n    }\n  });\n\n  builder.addCase(initHouses, (state, action) => {\n    for (let house of ALL_HOUSE_NAMES) {\n      if (action.payload[house]) {\n        state[house] = {\n          spice: 0,\n          cards: [],\n          name: house,\n        };\n      } else {\n        state[house] = undefined;\n      }\n    }\n  });\n});\n\nconst defaultViewState: ViewState = {\n  active_view: \"new_game\",\n  house_name: undefined,\n};\n\nexport const viewStateReducer = createReducer(defaultViewState, builder => {\n  builder.addCase(showNewGame, (state, _) => {\n    state.active_view = \"new_game\";\n    state.house_name = undefined;\n  });\n\n  builder.addCase(showOverview, (state, _) => {\n    state.active_view = \"overview\";\n    state.house_name = undefined;\n  });\n\n  builder.addCase(showHouseDetails, (state, action) => {\n    state.active_view = \"house_details\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(showEditSpice, (state, action) => {\n    state.active_view = \"edit_spice\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(showAddCard, (state, action) => {\n    state.active_view = \"add_card\";\n    state.house_name = action.payload;\n  });\n\n  builder.addCase(showViewCards, (state, action) => {\n    state.active_view = \"view_cards\";\n    state.house_name = action.payload;\n  })\n});\n\nexport const rootReducer = combineReducers({\n  houses: houseStateReducer,\n  view: viewStateReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"@reduxjs/toolkit\";\nimport { rootReducer } from \"./reducers\";\n\nexport const stateStore = createStore(rootReducer);\n\nexport type StoreDispatch = typeof stateStore.dispatch;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ViewManager from \"ts/ViewManager\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { stateStore } from \"ts/state/store\";\n\nReactDOM.render(\n  <Provider store={stateStore}>\n    <ViewManager />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}